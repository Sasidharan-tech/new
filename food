11.INTRODUCTION1.INTRODUCTION
The consumption of organic food has gained significant popularity in recent years, driven by growing concerns about food quality, environmental sustainability, and personal health. Organic foods are perceived as healthier alternatives to conventionally produced counterparts, as they are cultivated without the use of synthetic pesticides, fertilizers, or genetically modified organisms (GMOs). Moreover, organic farming practices promote soil health, biodiversity, and sustainable land management.In light of this increasing demand for organic products, there is a need for systems that can assist consumers in navigating the complex landscape of organic food choices. The Organic Food Recommended System (OFRS) using Java is proposed as a solution to address this need. This system aims to leverage the power of technology to provide personalized recommendations and empower users to make informed decisions about their food purchases.Java, as a widely used and versatile programming language, offers a robust platform for developing such a system. Its object-oriented approach, rich ecosystem of libraries and frameworks, and cross-platform compatibility make it an ideal choice for building scalable and efficient applications.The OFRS will serve as a user-friendly platform where consumers can input their dietary preferences, health goals, and other relevant information. Based on this input, the system will analyze a database of organic food products and recommend items that best match the user's profile. These recommendations will take into account factors such as nutritional value, organic certification, user ratings, and any specified dietary restrictions or allergies.
The introduction of the OFRS using Java represents a step towards promoting healthier eating habits and supporting sustainable food systems. By harnessing the capabilities of technology, this system aims to facilitate access to organic food options, thereby contributing to improved health outcomes for individuals and promoting environmental stewardship on a broader scale.

   
          


            1.2 SYSTEM SPECIFICATION

  1.1.1 Hardware Requirement:
1 GB RAM
80 GB Hard Disk
Above 2GHz Processor
Data Card
  1.1.2 Software Requirement:
Language	-	Java(JDK 1.7)
OS		-	Windows 7 32bit
Tool                -           Netbeans
Database         -           MYSQL


















          
      1.2 SOFTWARE DESCRIPTION
          1.2.1 JAVA	
          History:
The JAVA language was created by James Gosling in June 1991 for use in a set top box project. The language was initially called Oak, after an oak tree that stood outside Gosling's office - and also went by the name Green - and ended up later being renamed to Java, from a list of random words. Gosling's goals were to implement a virtual machine and a language that had a familiar C/C++ style of notation. The first public implementation was Java 1.0 in 1995. It promised "Write Once, Run anywhere” (WORA), providing no-cost runtimes on popular platforms. It was fairly secure and its security was configurable, allowing network and file access to be restricted. Major web browsers soon incorporated the ability to run secure Java applets within web pages. Java quickly became popular. With the advent of Java 2, new versions had multiple configurations built for different types of platforms. For example, J2EE was for enterprise applications and the greatly stripped down version J2ME was for mobile applications. J2SE was the designation for the Standard Edition. In 2006, for marketing purposes, new J2 versions were renamed Java EE, Java ME, and Java SE, respectively.
In 1997, Sun Microsystems approached the ISO/IEC JTC1 standards body and later the Ecma International to formalize Java, but it soon withdrew from the process. Java remains a standard that is controlled through the Java Community Process. At one time, Sun made most of its Java implementations available without charge although they were proprietary software. Sun's revenue from Java was generated by the selling of licenses for specialized products such as the Java Enterprise System. Sun distinguishes between its Software Development Kit (SDK) and Runtime Environment (JRE)which is a subset of the SDK, the primary distinction being that in the JRE, the compiler, utility programs, and many necessary header files are not present.
On 13 Novmber2006, Sun released much of Java as free software under the terms of the GNU General Public License(GPL). On 8 May2007Sun finished the process, making all of Java's core code open source, aside from a small portion of code to which Sun did not hold the copyright. 
Primary goals:
There were five primary goals in the creation of the Java language:
It should use the object-oriented programming methodology. 
It should allow the same program to be executed on multiple operating systems. 
It should contain built-in support for using computer networks.
It should be designed to execute code from remote sources securely. 
It should be easy to use by selecting what were considered the good parts of other object-oriented languages
The Java Programming Language:
The Java programming language is a high-level language that can be characterized by all of the following buzzwords: 
Simple
Architecture neutral
Object oriented
Portable
Distributed
High performance





















Each of the preceding buzzwords is explained in The Java Language Environment , a white paper written by James Gosling and Henry McGilton. 
In the Java programming language, all source code is first written in plain text files ending with the .java extension. Those source files are then compiled into .class files by the javac compiler. 
A .class file does not contain code that is native to your processor; it instead contains byte codes — the machine language of the Java Virtual Machine1 (Java VM). The java launcher tool then runs your application with an instance of the Java Virtual Machine. 




An overview of the software development   process.                      
Because the Java VM is available on many different operating systems, the same .class files are capable of running on Microsoft Windows, the Solaris TM Operating System (Solaris OS), Linux, or Mac OS. Some virtual machines, such as the Java Hot Spot virtual machine perform additional steps at runtime to give your application a performance boost. This include various tasks such as finding performance bottlenecks and recompiling (to native code) frequently used sections of code. 
         
Through the Java VM, the same application is capable of running on multiple platforms.
The Java Platform:
A platform is the hardware or software environment in which a program runs. We've already mentioned some of the most popular platforms like Microsoft Windows, Linux, Solaris OS, and Mac OS. Most platforms can be described as a combination of the operating system and underlying hardware. The Java platform differs from most other platforms in that it's a software-only platform that runs on top of other hardware-based platforms. 

            
                  The Java platform has two components: 
The Java Virtual Machine
The Java Application Programming Interface (API) 
You've already been introduced to the Java Virtual Machine; it's the base for the Java platform and is ported onto various hardware-based platforms. 
The API is a large collection of ready-made software components that provide many useful capabilities. It is grouped into libraries of related classes and interfaces; these libraries are known as packages. The next section, What Can Java Technology Do? Highlights some of the functionality provided by the API.
                          
The API and Java Virtual Machine insulate the program from the underlying hardware.
As a platform-independent environment, the Java platform can be a bit slower than native code. However, advances in compiler and virtual machine technologies are bringing performance close to that of native code without threatening portability. 
Java Runtime Environment:
The Java Runtime Environment, or JRE, is the software required to run any application deployed on the Java Platform. End-users commonly use a JRE in software packages and Web browser plug-in. Sun also distributes a superset of the JRE called the Java 2 SDK(more commonly known as the JDK), which includes development tools such as the Javacompiler,Javadoc, Jar and debugger.One of the unique advantages of the concept of a runtime engine is that errors (exceptions) should not 'crash' the system. 




Moreover, in runtime engine environments such as Java there exist tools that attach to the runtime engine and every time that an exception of interest occurs they record debugging information that existed in memory at the time the exception was thrown (stack and heap values). These Automated Exception Handling tools provide 'root-cause' information for exceptions in Java programs that run in production, testing or development environments.
Uses OF JAVA:
Blue is a smart card enabled with the secure, cross-platform, object-oriented Java Card API and technology. Blue contains an actual on-card processing chip, allowing for enhance able and multiple functionality within a single card. Applets that comply with the Java Card API specification can run on any third-party vendor card that provides the necessary Java Card Application Environment (JCAE). Not only can multiple applet programs run on a single card, but new applets and functionality can be added after the card is issued to the customer
Java Can be used in Chemistry.
In NASA also Java is used.
In 2D and 3D applications java is used.
In Graphics Programming also Java is used.
In Animations Java is used.
In Online and Web Applications Java is used.
             JSP :
Java Server Pages (JSP) is a Java technology that allows software developers to dynamically generate HTML, XML or other types of documents in response to a Web client request. The technology allows Java code and certain pre-defined actions to be embedded into static content.
The JSP syntax adds additional XML-like tags, called JSP actions, to be used to invoke built-in functionality. Additionally, the technology allows for the creation of JSP tag libraries that act as extensions to the standard HTML or XML tags. 
Tag libraries provide a platform independent way of extending the capabilities of a Web server.JSPs are compiled into Java Servlet by a JSP compiler. 
A JSP compiler may generate a servlet in Java code that is then compiled by the Java compiler, or it may generate byte code for the servlet directly. JSPs can also be interpreted on-the-fly reducing the time taken to reload changesJava Server Pages (JSP) technology provides a simplified, fast way to create dynamic web content. JSP technology enables rapid development of web-based applications that are server and platform-independent.
            Architecture OF JSP:
The Advantages of JSP:
Active Server Pages (ASP). ASP is a similar technology from Microsoft. The advantages of JSP are twofold. First, the dynamic part is written in Java, not Visual Basic or other MS-specific language, so it is more powerful and easier to use. Second, it is portable to other operating systems and non-Microsoft Web servers. Pure  Servlet. JSP doesn't give you anything that you couldn't in principle do with a Servlet. But it is more convenient to write (and to modify!) regular HTML than to have a zillion println statements that generate the HTML. Plus, by separating the look from the content you can put different people on different tasks: your Web page design experts can build the HTML, leaving places for your Servlet programmers to insert the dynamic content. 
 
Server-Side Includes (SSI). SSI is a widely-supported technology for including externally-defined pieces into a static Web page. JSP is better because it lets you use Servlet instead of a separate program to generate that dynamic part. Besides, SSI is really only intended for simple inclusions, not for "real" programs that use form data, make database connections, and the like.  JavaScript. JavaScript can generate HTML dynamically on the client. This is a useful capability, but only handles situations where the dynamic information is based on the client's environment. 
With the exception of cookies, HTTP and form submission data is not available to JavaScript. And, since it runs on the client, JavaScript can't access server-side resources like databases, catalogs, pricing information, and the like. Static HTML. Regular HTML, of course, cannot contain dynamic information. JSP is so easy and convenient that it is quite feasible to augment HTML pages that only benefit marginally by the insertion of small amounts of dynamic data. Previously, the cost of using dynamic data would preclude its use in all but the most valuable instances.
ARCHITECTURE OF JSP:

                        
The browser sends a request to a JSP page. 
The JSP page communicates with a Java bean. 
The Java bean is connected to a database. 
The JSP page responds to the browser. 

1.2.2 SERVLETS – FRONT END:
The Java Servlet API allows a software developer to add dynamic content to a Web server using the Java platform. The generated content is commonly HTML, but may be other data such as XML. Servlet are the Java counterpart to non-Java dynamic Web content technologies such as PHP, CGI and ASP.NET. 
Servlet can maintain state across many server transactions by using HTTP cookies, session variables or URL rewriting.The Servlet API, contained in the Java package hierarchy javax. Servlet, defines the expected interactions of a Web container and a Servlet.
A Web container is essentially the component of a Web server that interacts with the Servlet. The Web container is responsible for managing the lifecycle of Servlet, mapping a URL to a particular Servlet and ensuring that the URL requester has the correct access rights.A Servlet is an object that receives a request and generates a response based on that request. The basic Servlet package defines Java objects to represent Servlet requests and responses, as well as objects to reflect the Servlet configuration parameters and execution environment. 
The package java .Servlet. Http defines HTTP-specific subclasses of the generic Servlet elements, including session management objects that track multiple requests and responses between the Web server and a client. Servlet may be packaged in a WAR file as a Web application.
Servlet can be generated automatically by Java Server Pages(JSP), or alternately by template engines such as Web Macro. Often Servlet are used in conjunction with JSPs in a pattern called "Model 2”, which is a flavor of the model-view-controller pattern.Servlet are Java technology's answer to CGI programming. They are programs that run on a Web server and build Web pages. Building Web pages on the fly is useful (and commonly done) for a number of reasons:.



The Web page is based on data submitted by the user. For example the results pages from search engines are generated this way, and programs that process orders for e-commerce sites do this as well. The data changes frequently. For example, a weather-report or news headlines page might build the page dynamically, perhaps returning a previously built page if it is still up to date. The Web page uses information from corporate databases or other such sources. For example, you would use this for making a Web page at an on-line store that lists current prices and number of items in stock. 
The Servlet Run-time Environment:
A Servlet is a Java class and therefore needs to be executed in a Java VM by a service we call a Servlet engine. The Servlet engine loads the servlet class the first time the Servlet is requested, or optionally already when the Servlet engine is started. The Servlet then stays loaded to handle multiple requests until it is explicitly unloaded or the Servlet engine is shut down. 
Some Web servers, such as Sun's Java Web Server (JWS), W3C's Jigsaw and Gefion Software's Lite Web Server (LWS) are implemented in Java and have a built-in Servlet engine. Other Web servers, such as Netscape's Enterprise Server, Microsoft's Internet Information Server (IIS) and the Apache Group's Apache, require a Servlet engine add-on module. 	The add-on intercepts all requests for Servlet, executes them and returns the response through the Web server to the client. Examples of Servlet engine add-ons are Gefion Software's WAI Cool Runner, IBM's Web Sphere, Live Software's Run and New Atlanta's Servlet Exec. 
All Servlet API classes and a simple Servlet-enabled Web server are combined into the Java Servlet Development Kit (JSDK), available for download at Sun's official Servlet site .To get started with Servlet I recommend that you download the JSDK and play around with the sample Servlet. 





Life Cycle OF Servlet	
The Servlet lifecycle consists of the following steps:
The Servlet class is loaded by the container during start-up. 
The container calls the init() method. This method initializes the Servlet and must be called before the Servlet can service any requests. In the entire life of a Servlet, the init() method is called only once.  After initialization, the Servlet can service client-requests.
 Each request is serviced in its own separate thread. The container calls the service() method of the Servlet for every request. 
The service() method determines the kind of request being made and dispatches it to an appropriate method to handle the request. The developer of the Servlet must provide an implementation for these methods. If a request for a method that is not implemented by the Servlet is made, the method of the parent class is called, typically resulting in an error being returned to the requester. Finally, the container calls the destroy() method which takes the Servlet out of service. The destroy() method like init() is called only once in the lifecycle of a Servlet. 
Request and Response Objects
The do Get method has two interesting parameters: HttpServletRequest and HttpServletResponse. These two objects give you full access to all information about the request and let you control the output sent to the client as the response to the request.  With CGI you read environment variables and stdin to get information about the request, but the names of the environment variables may vary between implementations and some are not provided by all Web servers. 
The HttpServletRequest object provides the same information as the CGI environment variables, plus more, in a standardized way. It also provides methods for extracting HTTP parameters from the query string or the request body depending on the type of request (GET or POST). As a Servlet developer you access parameters the same way for both types of requests. Other methods give you access to all request headers and help you parse date and cookie headers.
Instead of writing the response to stdout as you do with CGI, you get an Output Stream or a Print Writer from the Http Servlet Response. The Output Stream is intended for binary data, such as a GIF or JPEG image, and the Print Writer for text output. You can also set all response headers and the status code, without having to rely on special Web server CGI configurations such as Non Parsed Headers (NPH). This makes your Servlet easier to install. 
Servlet Condig and Servlet Context:
There is only one Servlet Context in every application. This object can be used by all the Servlet to obtain application level information or container details. Every Servlet, on the other hand, gets its own ServletConfig object. This object provides initialization parameters for a servlet. A developer can obtain the reference to Servlet Context using either the ServletConfig object or Servlet Request object.
All servlets belong to one servlet context. In implementations of the 1.0 and 2.0 versions of the Servlet API all servlets on one host belongs to the same context, but with the 2.1 version of the API the context becomes more powerful and can be seen as the humble beginnings of an Application concept. Future versions of the API will make this even more pronounced. 
Many servlet engines implementing the Servlet 2.1 API let you group a set of servlets into one context and support more than one context on the same host. The Servlet Context in the 2.1 API is responsible for the state of its servlets and knows about resources and attributes available to the servlets in the context. Here we will only look at how Servlet Context attributes can be used to share information among a group of servlets.  
There are three Servlet Context methods dealing with context attributes: get Attribute, set Attribute and remove Attribute. In addition the servlet engine may provide ways to configure a servlet context with initial attribute values. This serves as a welcome addition to the servlet initialization arguments for configuration information used by a group of servlets, for instance the database identifier we talked about above, a style sheet URL for an application, the name of a mail server, etc. 



JDBC:
Java Database Connectivity (JDBC) is a programming framework for Java developers writing programs that access information stored in databases, spreadsheets, and flat files. JDBC is commonly used to connect a user program to a "behind the scenes" database, regardless of what database management software is used to control the database. In this way, JDBC is cross-platform. This article will provide an introduction and sample code that demonstrates database access from Java programs that use the classes of the JDBC API, which is available for free download from Sun's site.
A database that another program links to is called a data source. Many data sources, including products produced by Microsoft and Oracle, already use a standard called Open Database Connectivity (ODBC). Many legacy C and Perl programs use ODBC to connect to data sources. ODBC consolidated much of the commonality between database management systems. JDBC builds on this feature, and increases the level of abstraction. JDBC-ODBC bridges have been created to allow Java programs to connect to ODBC-enabled database software.
JDBC Architecture:
Two-tier and three-tier Processing Models
The JDBC API supports both two-tier and three-tier processing models for database access. 

In the two-tier model, a Java applet or application talks directly to the data source. This requires a JDBC driver that can communicate with the particular data source being accessed. A user's commands are delivered to the database or other data source, and the results of those statements are sent back to the user. The data source may be located on another machine to which the user is connected via a network. 
This is referred to as a client/server configuration, with the user's machine as the client, and the machine housing the data source as the server. The network can be an intranet, which, for example, connects employees within a corporation, or it can be the Internet. 
In the three-tier model, commands are sent to a "middle tier" of services, which then sends the commands to the data source. The data source processes the commands and sends the results back to the middle tier, which then sends them to the user.
 MIS directors find the three-tier model very attractive because the middle tier makes it possible to maintain control over access and the kinds of updates that can be made to corporate data. Another advantage is that it simplifies the deployment of applications. Finally, in many cases, the three-tier architecture can provide performance advantages. 

Until recently, the middle tier has often been written in languages such as C or C++, which offer fast performance. However, with the introduction of optimizing compilers that translate Java byte code into efficient machine-specific code and technologies such as Enterprise JavaBeans™, the Java platform is fast becoming the standard platform for middle-tier development. This is a big plus, making it possible to take advantage of Java's robustness, multithreading, and security features.With enterprises increasingly using the Java programming language for writing server code, the JDBC API is being used more and more in the middle tier of a three-tier architecture. Some of the features that make JDBC a server technology is its support for connection pooling, distributed transactions, and disconnected row sets. The JDBC API is also what allows access to a data source from a Java middle tier.
1.2.3 BACK END:
MySQL: 
                    MySQl, the most popular Open souce SQL database management system,is developed distributed and suppoted by Oracle Corporation. The MySQl  Web site(http://www.mysql.com/)provides the latest information about MySQL Software.
1. MySQL is a database management system
         A database is a structured collection of data  it may be anything from a simple shopping list to a picture gallery over or the vast amount of information in a corporate network.  To ,access ,and process data stored in a computer database, you need  database       management system such as  MySQL  Server .
2.MySQL  database are relational.
        A relational database stores data in separate tables  rather than putting all the data in one big storeroom The database structures are organized into physical files optimized for speed. The logical model, with objects such as databases, tables, views,  rows, and colums, offers a flexible  programming environment .you set up rules governing the relationships between  different data  fields ,such as one-to-one, one-to-many, unique, required optional ,and “pointers” between different tables. the database forces these rules, so that with a well-designed database, your application never sees inconsistent ,duplicate ,orphan ,out-of-date ,or missing data.The SQL part of “MySQL” stands for “Structured Query Language “.SQL is the most common standardized language used to access databases.
3. MySQL  Software  is Open Source.
Open Source means that it is possible for anyone to use and modify the software. Anybody can download the MySQL software from the internet and use it without paying anything. If you may study the source code and change it to suit  your needs.The  MySQL  software  uses the GPL  (GNU  General  public License), http://WWW.fsf.org/licenses/, to define what you may and may not do  with the software  in different situations. 


if  you feel uncomfortable with the GPL or need to embed MySQL  code into a commercial application,you can buy a commercial licenced version from  us.See the MySQL Licencing Overview for more information (http://www.mysql.com/comapny/legal/licencing) source.The Service Broker handles messaging between a sender and receiver in a loosely coupled manner. A message is sent, processed and responded to, completing the transaction. This greatly expands the capabilities of data-driven applications to meet workflow or custom business needs.
4. Data Encryption
 	Server 2005 has native capabilities to support encryption of data stored in user-defined databases. SQL Server 2000 had no documented or publicly supported functions to encrypt data in a table natively. Organizations had to rely on third-party products to address this need. SQL
5. SMTP mail
            Sending mail directly from SQL Server 2000 is possible, but challenging. With SQL Server 2005, Microsoft incorporates SMTP mail to improve the native mail capabilities. Say "see-ya" to Outlook on SQL Server!
6. HTTP endpoints
            You can easily create HTTP endpoints via a simple T-SQL statement exposing an object that can be accessed over the Internet. This allows a simple object to be called across the Internet for the needed data. 
7. Multiple Active Result Sets (MARS)
            MARS allow a persistent database connection from a single client to have more than one active request per connection. This should be a major performance improvement, allowing developers to give users new capabilities when working with SQL Server. 
            For example, it allows multiple searches, or a search and data entry. The bottom line is that one client connection can have multiple active processes simultaneously.
8. Dedicated administrator connection
             If all else fails, stop the SQL Server service or push the power button. That mentality is finished with the dedicated administrator connection. This functionality will allow a DBA to make a single diagnostic connection to SQL Server even if the server is having an issue.
9. SQL Server Integration Services (SSIS)
              SSIS has replaced DTS (Data Transformation Services) as the primary ETL (Extraction, Transformation and Loading) tool and ships with SQL Server free of charge. This tool, completely rewritten since SQL Server 2000, now has a great deal of flexibility to address complex data movement.
10. Database mirroring
                It's not expected to be released with SQL Server 2005 at the RTM in November, but I think this feature has great potential. Database mirroring is an extension of the native high-availability capabilities.



















2.SYSTEM STUDY
2.1 EXISTING SYSTEM
           Before delving into the development of the Organic Food Recommended System (OFRS) using Java, it's essential to understand the existing landscape of organic food recommendation systems and the challenges they currently face. While there are various platforms and applications catering to food recommendation, dedicated systems focusing specifically on organic products are relatively scarce.Existing food recommendation systems such as those found in meal delivery apps, grocery delivery platforms, and recipe websites offer personalized recommendations based on user preferences, dietary restrictions, and past interactions.These systems often lack a specific focus on organic products and may not prioritize factors such as organic certification, sustainability, or environmental impact in their recommendations.
2.1.1 DISADVANTAGE:
Depending on geographical location and market availability, the range of organic products accessible through the system may be limited.
The accuracy and reliability of product data, including nutritional information, organic certifications, and user ratings, heavily influence the effectiveness of the recommendation engine. 
Inaccurate or outdated data can lead to misleading recommendations and undermine user trust in the system.
ecommendation algorithms may inadvertently exhibit bias based on factors such as user demographics, past interactions, or product popularity. 







          2.2 PORPOSED SYSTEM:
            The Organic Food Recommended System (OFRS) using Java aims to overcome the limitations of existing systems and provide a comprehensive solution for recommending organic food products. The proposed system incorporates innovative features and functionalities to deliver personalized recommendations, promote user engagement, and foster a healthier and more sustainable food ecosystem.Utilizes advanced algorithms to analyze user profiles, preferences, and behavior data to generate personalized recommendations.Considers factors such as dietary preferences, health goals, nutritional requirements, organic certifications, and user feedback to tailor recommendations to individual users.Maintains a comprehensive database of organic food products, including detailed information such as product name, description, nutritional content, organic certification status, and user ratings.Features an intuitive and user-friendly interface accessible via web browsers and mobile devices.Provides seamless navigation, search, and filtering functionalities to facilitate product discovery and sel
 2.2.1 ADVANTAGE:
By recommending organic food products tailored to users' preferences and nutritional needs, the system encourages healthier dietary choices.
The system provides users with easy access to a wide range of organic food products, irrespective of their geographical location or proximity to organic stores.
 This accessibility promotes inclusivity and enables users to make informed decisions about their food purchases.
Leveraging advanced algorithms, the system generates personalized recommendations based on user profiles, dietary preferences, and health goals. 
This personalized approach enhances user engagement and satisfaction by presenting relevant product options tailored to individual needs.
Organic farming practices promote soil health, biodiversity, and environmental sustainability by minimizing chemical inputs and emphasizing natural resource conservation.
3.SYSTEM DESIGN AND DEVELOPMENT
3.1 FILE DESIGN
Data are accumulated into files that are processed or maintained by the system. The systems analyst is responsible for designing files, determining their contents and selecting a method for organising the data. Data Item Individual elements of data are called data items also known as fields or simply items. Record Key is to distinguish one specific record from another, systems analysts select one data item in the record that is likely to be unique in all records of a file and use it for identification purposes. 
3.2 INPUT DESIGN
Input design is the raw data that is processed to produce output. The decisions made during the input designs are
To provide cost effective method of input
To achieve the highest possible of accuracy
To ensure that the code is understand by the user
 It is important to design appropriate data input methods to prevent errors while entering data. These methods depend on whether the data is entered by customers in forms manually and later entered by data entry operators, or data is directly entered by users. Data preparation and data entry operation depend on people, because labour costs are high, the cost of preparing and entering data is also high. Reducing data requirement, input requirement the speed of entire process from data capturing to processing will increase to provide results for users.
3.2.1The objectives of input design:
The objective of input design is to ensure the quality, accuracy, completeness, and timeliness of input data during its conversion from its original source into computer data, or entry into a computer application. 
Data can be entered into a computer application from either manual onlineinput or by scheduled automated processing.Input controls will ensure that data is accurately processed through the application and that no data is added, lost,or altered during processing.Data validation is the process of ensuring that a program operates on cleancorrect data. 
      3.3 OUTPUT DESIGN:
   	The design of output is the most important task of any system. Output design include routing codes to identify the receiving system, and verification messages to confirm successful receipt of messages that are handled by network protocol. Part of the task of designing output is deciding what quantity of output is correct for users. A useful heuristic is that the system must provide what each person needs to complete his or her work. This answer is still far from a total solution, because it may be appropriate to display a subset of that information at first and then provide a way for the user to access additional information easily.
3.3.1OUTPUT DESIGN OBJECTIVES:
         	 1. Design output to serve the intended purpose - essentially, this means that the systems objectives should be met but the objectives should be linked to the business tactics
          	2. Design output to fit the user - design for the person, not the position; remember human information processing differences; issue of detail versus summary
          	3. Delivering the appropriate quantity of output - don't create overload, create enough to perform business tactics and make anything else optional
          	4.  Making sure the output is where it is needed - right person at the right place; consider discontinuing printed output and see if anyone asks for it
5. Providing the output on time (and for the right time period)
6.Choosing the right output method- consider all senses (sound, smell, touch?)
        3.4 CODE DESIGN:
 	Design code is a document that has set of rules for the design of a new development. It is a design tool server. In my project, I have set of modules such as Police stations registration module, Victims FIR registration module and Investigating evidence registration module.






3.5 DATABASE DESIGN
Database design is the organization of data according to a database model. The designer determines what data must be stored and how the data elements interrelate. With this information, they can begin to fit the data to the database model. Database design involves classifying data and identifying interrelationships. 
3.6 SYSTEM DEVELOPMENT
Systems development is the process of defining, designing, testing, and implementing a new software application or program. It could include the internal development of customized systems, the creation of database systems, or the acquisition of third party developed software. Written standards and procedures must guide all information systems processing functions. The organization’s management must define and implement standards and adopt an appropriate system development life cycle methodology governing the process of developing, acquiring, implementing, and maintaining computerized information systems and related technology.
             3.6.1 DESCRIPTION OF MODULES
         REGISTRATION MODULE:
Users should be able to register for a new account by providing necessary details like username, email, and password
Implement validation checks to ensure that the provided information is valid and that the username and email are unique.
Hash the password before storing it in the database for security purposes.
Optionally, you can send a verification email to the user's provided email address for account activation.
              LOGIN MODULE:
Allow registered users to log in to their accounts using their username/email and password.
Validate the entered credentials against the data stored in the database.
Create a session for the user upon successful login to maintain their authentication state.
              FOOD  MODULE:
Define a data model to represent organic food items. Include attributes such as name, description, category, origin, nutritional information, price, etc.
Implement Java classes to represent food items and their properties.
             1)DIABETES-SPECIFIC FOOD DATA REPRESENTATION:
Define a data model to represent organic food items suitable for individuals with diabetes. This may include attributes such as glycemic index (GI), carbohydrate content, fiber content, protein content, etc.
2)BLOOD PRESSURE-FRIENDLY FOOD DATA REPRESENTATION:
Define a data model to represent organic food items suitable for individuals with high blood pressure. Consider attributes such as sodium content, potassium content, magnesium content, fiber content, etc.
3)HEART-HEALTHY FOOD DATA REPRESENTATION:
Define a data model to represent organic food items suitable for individuals with heart conditions. Consider attributes such as saturated fat content, trans fat content, cholesterol content, fiber content, etc.
















4.TESTING AND IMPLEMENTATION

4.1 Testing
The various levels of testing are
      White Box Testing
      Black Box Testing
      Unit Testing
      Functional Testing
      Performance Testing
      Integration Testing
      Objective
      Integration Testing
      Validation Testing
System Testing
Structure Testing
Output Testing
       4.13     User Acceptance Testing
4.1 White Box Testing
White-box testing (also known as clear box testing, glass box testing, transparent box testing, and structural testing) is a method of testing software that tests internal structures or workings of an application, as opposed to its functionality (i.e. black-box testing). In white-box testing an internal perspective of the system, as well as programming skills, are used to design test cases. The tester chooses inputs to exercise paths through the code and determine the appropriate outputs. This is analogous to testing nodes in a circuit, e.g. in-circuit testing (ICT).
While white-box testing can be applied at the unit, integration and system levels of the software testing process, it is usually done at the unit level. It can test paths within a unit, paths between units during integration, and between subsystems during a system–level test. Though this method of test design can uncover many errors or problems, it might not detect unimplemented parts of the specification or missing requirements.
White-box test design techniques include:
Control flow testing
Data flow testing
Branch testing
Path testing
Statement coverage
Decision coverage
White-box testing is a method of testing the application at the level of the source code. The test cases are derived through the use of the design techniques mentioned above: control flow testing, data flow testing, branch testing, path testing, statement coverage and decision coverage as well as modified condition/decision coverage. White-box testing is the use of these techniques as guidelines to create an error free environment by examining any fragile code. These White-box testing techniques are the building blocks of white-box testing, whose essence is the careful testing of the application at the source code level to prevent any hidden errors later on. These different techniques exercise every visible path of the source code to minimize errors and create an error-free environment. The whole point of white-box testing is the ability to know which line of the code is being executed and being able to identify what the correct output should be.
Levels
1. Unit testing. White-box testing is done during unit testing to ensure that the code is working as intended, before any integration happens with previously tested code. White-box testing during unit testing catches any defects early on and aids in any defects that happen later on after the code is integrated with the rest of the application and therefore prevents any type of errors later on.
2. Integration testing. White-box testing at this level are written to test the interactions of each interface with each other. The Unit level testing made sure that each code was tested and working accordingly in an isolated environment and integration examines the correctness of the behaviour in an open environment through the use of white-box .Regression testing. White-box testing during regression testing is the use of recycled white-box test cases at the unit and integration testing levels.
White-box testing's basic procedures involve the understanding of the source code that you are testing at a deep level to be able to test them. The programmer must have a deep understanding of the application to know what kinds of test cases to create so that every visible path is exercised for testing. Once the source code is understood then the source code can be analysed for test cases to be created. These are the three basic steps that white-box testing takes in order to create test cases:
Input, involves different types of requirements, functional specifications, detailed designing of documents, proper source code, security specifications. This is the preparation stage of white-box testing to layout all of the basic information.
Processing Unit, involves performing risk analysis to guide whole testing process, proper test plan, execute test cases and communicate results. This is the phase of building test cases to make sure they thoroughly test the application the given results are recorded accordingly.
Output, prepare final report that encompasses all of the above preparations and results.
4.2 Black Box Testing
Black-box testing is a method of software testing that examines the functionality of an application (e.g. what the software does) without peering into its internal structures or workings (see white-box testing). This method of test can be applied to virtually every level of software testing: unit, integration,system and acceptance. It typically comprises most if not all higher level testing, but can also dominate unit testing as well.
           Test procedures:
Specific knowledge of the application's code/internal structure and programming knowledge in general is not required. The tester is aware of what the software is supposed to do but is not aware of how it does it. For instance, the tester is aware that a particular input returns a certain, invariable output but is not aware of how the software produces the output in the first place.
Test cases:
Test cases are built around specifications and requirements, i.e., what the application is supposed   to do. Test cases are generally derived from external descriptions of the software, including specifications, requirements and design parameters. Although the tests used are primarily functional in nature, non-functional tests may also be used. The test designer selects both valid and invalid inputs and determines the correct output without any knowledge of the test object's internal structure.
Test design techniques:
Typical black-box test design techniques include:
Decision table testing
All-pairs testing
State transition tables
Equivalence partitioning
Boundary value analysis
4.3 Unit testing:
In computer programming, unit testing is a method by which individual units of source code, sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures are tested to determine if they are fit for use. Intuitively, one can view a unit as the smallest testable part of an application. In procedural programming, a unit could be an entire module, but is more commonly an individual function or procedure. In object-oriented programming, a unit is often an entire interface, such as a class, but could be an individual method. Unit tests are created by programmers or occasionally by white box testers during the development process.
Ideally, each test case is independent from the others. Substitutes such as method stubs, mock objects, fakes, and test harnesses can be used to assist testing a module in isolation. Unit tests are typically written and run by software developers to ensure that code meets its design and behaves as intended. Its implementation can vary from being very manual (pencil and paper)to being formalized as part of build automation.
Testing will not catch every error in the program, since it cannot evaluate every execution path in any but the most trivial programs. The same is true for unit testing. Additionally, unit testing by definition only tests the functionality of the units themselves. Therefore, it will not catch integration errors or broader system-level errors (such as functions performed across multiple units, or non-functional test areas such as performance). 
Unit testing should be done in conjunction with other software testing activities, as they can only show the presence or absence of particular errors; they cannot prove a complete absence of errors. In order to guarantee correct behaviour for every execution path and every possible input, and ensure the absence of errors, other techniques are required, namely the application of formal methods to proving that a software component has no unexpected behaviour.
Software testing is a combinatorial problem. For example, every Boolean decision statement requires at least two tests: one with an outcome of "true" and one with an outcome of "false". As a result, for every line of code written, programmers often need 3 to 5 lines of test code.
 This obviously takes time and its investment may not be worth the effort. There are also many problems that cannot easily be tested at all – for example those that are nondeterministic or involve multiple threads. In addition, code for a unit test is likely to be at least as buggy as the code it is testing. Fred Brooks in The Mythical Man-Month quotes: never take two chronometers to sea. Always take one or three. Meaning, if two chronometers contradict, how do you know which one is correct? Another challenge related to writing the unit tests is the difficulty of setting up realistic and useful tests. 
It is necessary to create relevant initial conditions so the part of the application being tested behaves like part of the complete system. If these initial conditions are not set correctly, the test will not be exercising the code in a realistic context, which diminishes the value and accuracy of unit test results. To obtain the intended benefits from unit testing, rigorous discipline is needed throughout the software development process.


. It is essential to keep careful records not only of the tests that have been performed, but also of all changes that have been made to the source code of this or any other unit in the software. Use of a version control system is essential. If a later version of the unit fails a particular test that it had previously passed, the version-control software can provide a list of the source code changes (if any) that have been applied to the unit since that time.
It is also essential to implement a sustainable process for ensuring that test case failures are reviewed daily and addressed immediately if such a process is not implemented and ingrained into the team's workflow, the application will evolve out of sync with the unit test suite, increasing false positives and reducing the effectiveness of the test suite.
Unit testing embedded system software presents a unique challenge: Since the software is being developed on a different platform than the one it will eventually run on, you cannot readily run a test program in the actual deployment environment, as is possible with desktop programs.[7]
4.4 Functional testing:
Functional testing is a quality assurance (QA) process and a type of black box testing that bases its test cases on the specifications of the software component under test. Functions are tested by feeding them input and examining the output, and internal program structure is rarely considered (not like in white-box testing). Functional Testing usually describes what the system does.Functional testing differs from system testing in that functional testing "verifies a program by checking it against ... design document(s) or specification(s)", while system testing "validate a program by checking it against the published user or system requirements" (Kane, Falk, Nguyen 1999, p. 52).
Functional testing typically involves five steps .The identification of functions that the software is expected to perform.
The creation of input data based on the function's specifications
The determination of output based on the function's specifications
The execution of the test case
The comparison of actual and expected outputs

4.5 Performance testing:
In software engineering, performance testing is in general testing performed to determine how a system performs in terms of responsiveness and stability under a particular workload. It can also serve to investigate, measure, validate or verify other quality attributes of the system, such as scalability, reliability and resource usage.
Performance testing is a subset of performance engineering, an emerging computer science practice which strives to build performance into the implementation, design and architecture of a system.
4.6 Testing types:
Load testing:
Load testing is the simplest form of performance testing. A load test is usually conducted to understand the behaviour of the system under a specific expected load. This load can be the expected concurrent number of users on the application performing a specific number of transactions within the set duration. This test will give out the response times of all the important business critical transactions. If the database, application server, etc. are also monitored, then this simple test can itself point towards bottlenecks in the application software.
Stress testing:
Stress testing is normally used to understand the upper limits of capacity within the system. This kind of test is done to determine the system's robustness in terms of extreme load and helps application administrators to determine if the system will perform sufficiently if the current load goes well above the expected maximum.
Soak testing:
Soak testing, also known as endurance testing, is usually done to determine if the system can sustain the continuous expected load. During soak tests, memory utilization is monitored to detect potential leaks. Also important, but often overlooked is performance degradation. That is, to ensure that the throughput and/or response times after some long period of sustained activity are as good as or better than at the beginning of the test.
Spike testing:
Spike testing is done by suddenly increasing the number of or load generated by, users by a very large amount and observing the behaviour of the system. The goal is to determine whether performance will suffer, the system will fail, or it will be able to handle dramatic changes in load.
Configuration testing:
Rather than testing for performance from the perspective of load, tests are created to determine the effects of configuration changes to the system's components on the system's performance and behaviour. A common example would be experimenting with different methods of load-balancing.
Isolation testing:
Isolation testing is not unique to performance testing but involves repeating a test execution that resulted in a system problem. Often used to isolate and confirm the fault domain.
4.7 Integration testing:
             Integration testing (sometimes called integration and testing, abbreviated I&T) is the phase in software testing in which individual software modules are combined and tested as a group. It occurs after unit testing and before validation testing. Integration testing takes as its input modules that have been unit tested, groups them in larger aggregates, applies tests defined in an integration test plan to those aggregates, and delivers as its output the integrated system ready for system testing.
Purpose:
The purpose of integration testing is to verify functional, performance, and reliability requirements placed on major design items. These "design items", i.e. assemblages (or groups of units), are exercised through their interfaces using black box testing, success and error cases being simulated via appropriate parameter and data inputs. Simulated usage of shared data areas and inter-process communication is tested and individual subsystems are exercised through their input interface. Test cases are constructed to test whether all the components within assemblages interact correctly, for example across procedure calls or process activations, and this is done after testing individual modules, i.e. unit testing. 
The overall idea is a "building block" approach, in which verified assemblages are added to a verified base which is then used to support the integration testing of further assemblages.Some different types of integration testing are big bang, top-down, and bottom-up. 
Other Integration Patterns are: Collaboration Integration, Backbone Integration, Layer Integration, Client/Server Integration, Distributed Services Integration and High-frequency Integration.
Big Bang:
In this approach, all or most of the developed modules are coupled together to form a complete software system or major part of the system and then used for integration testing. The Big Bang method is very effective for saving time in the integration testing process. However, if the test cases and their results are not recorded properly, the entire integration process will be more complicated and may prevent the testing team from achieving the goal of integration testing.
A type of Big Bang Integration testing is called Usage Model testing. Usage Model Testing can be used in both software and hardware integration testing. The basis behind this type of integration testing is to run user-like workloads in integrated user-like environments. In doing the testing in this manner, the environment is proofed, while the individual components are proofed indirectly through their use. Usage Model testing takes an optimistic approach to testing, because it expects to have few problems with the individual components.
 The strategy relies heavily on the component developers to do the isolated unit testing for their product. The goal of the strategy is to avoid redoing the testing done by the developers, and instead flesh-out problems caused by the interaction of the components in the environment. 
For integration testing, Usage Model testing can be more efficient and provides better test coverage than traditional focused functional integration testing. To be more efficient and accurate, care must be used in defining the user-like workloads for creating realistic scenarios in exercising the environment. This gives confidence that the integrated environment will work as expected for the target customers.
Top-down and Bottom-up:
Bottom Up Testing is an approach to integrated testing where the lowest level components are tested first, then used to facilitate the testing of higher level components. The process is repeated until the component at the top of the hierarchy is tested.
All the bottom or low-level modules, procedures or functions are integrated and then tested. After the integration testing of lower level integrated modules, the next level of modules will be formed and can be used for integration testing. This approach is helpful only when all or most of the modules of the same development level are ready. This method also helps to determine the levels of software developed and makes it easier to report testing progress in the form of a percentage.
Top Down Testing is an approach to integrated testing where the top integrated modules are tested and the branch of the module is tested step by step until the end of the related module.
Sandwich Testing is an approach to combine top down testing with bottom up testing.
The main advantage of the Bottom-Up approach is that bugs are more easily found. With Top-Down, it is easier to find a missing branch link.
        4.8 Verification and validation:
Verification and Validation are independent procedures that are used together for checking that a product, service, or system meets requirements and specifications and that it full fills its intended purpose. 
 These are critical components of a quality management system such as ISO 9000. The words "verification" and "validation" are sometimes preceded with "Independent" (or IV&V), indicating that the verification and validation is to be performed by a disinterested third party.
It is sometimes said that validation can be expressed by the query "Are you building the right thing?" and verification by "Are you building it right?"In practice, the usage of these terms varies. Sometimes they are even used interchangeably.
The PMBOK guide, an IEEE standard, defines them as follows in its 4th edition
"Validation. The assurance that a product, service, or system meets the needs of the customer and other identified stakeholders. It often involves acceptance and suitability with external customers. Contrast with verification."
"Verification. The evaluation of whether or not a product, service, or system complies with a regulation, requirement, specification, or imposed condition. It is often an internal process. Contrast with validation."
Verification is intended to check that a product, service, or system (or portion thereof, or set thereof) meets a set of initial design specifications. In the development phase, verification procedures involve performing special tests to model or simulate a portion, or the entirety, of a product, service or system, then performing a review or analysis of the modelling results. In the post-development phase, verification procedures involve regularly repeating tests devised specifically to ensure that the product, service, or system continues to meet the initial design requirements, specifications, and regulations as time progresses. It is a process that is used to evaluate whether a product, service, or system complies with regulations, specifications, or conditions imposed at the start of a development phase.
 Verification can be in development, scale-up, or production. This is often an internal process.
Validation is intended to check that development and verification procedures for a product, service, or system (or portion thereof, or set thereof) result in a product, service, or system (or portion thereof, or set thereof) that meets initial requirements. For a new development flow or verification flow, validation procedures may involve modelling either flow and using simulations to predict faults or gaps that might lead to invalid or incomplete verification or development of a product, service, or system (or portion thereof, or set thereof). A set of validation requirements, specifications, and regulations may then be used as a basis for qualifying a development flow or verification flow for a product, service, or system (or portion thereof, or set thereof). 


Additional validation procedures also include those that are designed specifically to ensure that modifications made to an existing qualified development flow or verification flow will have the effect of producing a product, service, or system (or portion thereof, or set thereof) that meets the initial design requirements, specifications, and regulations; these validations help to keep the flow qualified. It is a process of establishing evidence that provides a high degree of assurance that a product, service, or system accomplishes its intended requirements. This often involves acceptance of fitness for purpose with end users and other product stakeholders. This is often an external process.
It is sometimes said that validation can be expressed by the query "Are you building the right thing?" and verification by "Are you building it right?". "Building the right thing" refers back to the user's needs, while "building it right" checks that the specifications are correctly implemented by the system. In some contexts, it is required to have written requirements for both as well as formal procedures or protocols for determining compliance.
It is entirely possible that a product passes when verified but fails when validated. This can happen when, say, a product is built as per the specifications but the specifications themselves fail to address the use    
             Activities:
Verification of machinery and equipment usually consists of design qualification (DQ), installation qualification (IQ), operational qualification (OQ), and performance qualification (PQ). DQ is usually a vendor's job. However, DQ can also be performed by the user, by confirming through review and testing that the equipment meets the written acquisition specification. If the relevant document or manuals of machinery/equipment are provided by vendors, the later 3Q needs to be thoroughly performed by the users who work in an industrial regulatory environment. Otherwise, the process of IQ, OQ and PQ is the task of validation. The typical example of such a case could be the loss or absence of vendor's documentation for legacy equipment or do-it-yourself (DIY) assemblies (e.g., cars, computers etc.) and, therefore, users should endeavour to acquire DQ document beforehand. 
Each template of DQ, IQ, OQ and PQ usually can be found on the internet respectively, whereas the DIY qualifications of machinery/equipment can be assisted either by the vendor's training course materials and tutorials, or by the published guidance books, such as step-by-step series if the acquisition of machinery/equipment is not bundled with on- site qualification services.
 This kind of the DIY approach is also applicable to the qualifications of software, computer operating systems and a manufacturing process. The most important and critical task as the last step of the activity is to generating and archiving machinery/equipment qualification reports for auditing purposes, if regulatory compliances are mandatory.
Qualification of machinery/equipment is venue dependent, in particular items that are shock sensitive and require balancing or calibration, and re-qualification needs to be conducted once the objects are relocated. The full scales of some equipment qualifications are even time dependent as consumables are used up (i.e. filters) or springs stretch out, requiring recalibration.
 Hence re-certification is necessary when a specified due time lapse Re-qualification of machinery/equipment should also be conducted when replacement of parts, or coupling with another device, or installing a new application software and restructuring of the computer which affects especially the pre-settings, such as on BIOS, registry, disk drive partition table, dynamically-linked (shared) libraries, or an ini file etc., have been necessary. In such a situation, the specifications of the parts/devices/software and restructuring proposals should be appended to the qualification document whether the parts/devices/software are genuine or not. 
Torres and Hyman have discussed the suitability of non-genuine parts for clinical use and provided guidelines for equipment users to select appropriate substitutes which are capable to avoid adverse effects. In the case when genuine parts/devices/software are demanded by some of regulatory requirements, then re-qualification does not need to be conducted on the non-genuine assemblies. Instead, the asset has to be recycled for non-regulatory purposes.When machinery/equipment qualification is conducted by a standard endorsed third party such as by an ISO standard accredited company for a particular division, the process is called certification.
4.9 System testing:
System testing of software or hardware is testing conducted on a complete, integrated system to evaluate the system's compliance with its specified requirements. System testing falls within the scope of black box testing, and as such, should require no knowledge of the inner design of the code or logic.As a rule, system testing takes, as its input, all of the "integrated" software components that have passed integration testing and also the software system itself integrated with any applicable hardware system(s). The purpose of integration testing is to detect any inconsistencies between the software units that are integrated together (called assemblages) or between any of the assemblages and the hardware. System testing is a more limited type of testing
      System testing is performed on the entire system in the context of a Functional Requirement Specification(s) (FRS) and/or a System Requirement Specification (SRS). System testing tests not only the design, but also the behavior and even the believed expectations of the customer. It is also intended to test up to and beyond the bounds defined in the software/hardware requirements specification
















Types of tests to include in system testing
The following examples are different types of testing that should be considered during System testing:
Graphical user interface testing
Usability testing
Software performance testing
Compatibility testing
Exception handling
Load testing
Volume testing
Stress testing
Security testing
Scalability testing
Sanity testing
Smoke testing
Exploratory testing
Ad hoc testing
Regression testing
Installation testing
Maintenance testing Recovery testing and failover testing.
Accessibility testing, including compliance with:
Americans with Disabilities Act of 1990
Section 508 Amendment to the Rehabilitation Act of 1973
Web Accessibility Initiative (WAI) of the World Wide Web Consortium (W3C)
       Although different testing organizations may prescribe different tests as part of System testing, this list serves as a general framework or foundation to begin with.





4.10 Structure Testing:
It is concerned with exercising the internal logic of a program and traversing particular execution paths.
  Output Testing:
Output of test cases compared with the expected results created during design of test cases.
Asking the user about the format required by them tests the output generated or displayed by the system under consideration.
Here, the output format is considered into two was, one is on screen and another one is printed format.
The output on the screen is found to be correct as the format was designed in the system design phase according to user needs.
The output comes out as the specified requirements as the user’s hard copy.
User acceptance Testing:
Final Stage, before handling over to the customer which is usually carried out by the customer where the test cases are executed with actual data.
The system under consideration is tested for user acceptance and constantly keeping touch with the prospective system user at the time of developing and making changes whenever required.
It involves planning and execution of various types of test in order to demonstrate that the implemented software system satisfies the requirements stated in the requirement document.
Two set of acceptance test to be run:
Those developed by quality assurance group.
Those developed by customer.





5.CONCLUSION
In conclusion, the development of an organic food recommendation system using Java offers a valuable resource for individuals seeking to make healthy and sustainable dietary choices. The system incorporates a robust data model to represent organic food items, allowing users to browse, search, and filter through a diverse range of options. Data management functionalities facilitate the storage, retrieval, and updating of food-related information. A sophisticated recommendation engine has been developed to generate personalized recommendations for users based on their dietary preferences, health goals, and nutritional needs. Algorithms consider various factors such as dietary restrictions, health conditions, and user feedback to provide tailored recommendations. 
        5.1 FUTURE ENHANCEMENT
 	Incorporate integration with wearable health and fitness devices to gather real-time data on users' activity levels, heart rate, and other relevant health metrics. This data can be used to further personalize food recommendations and provide tailored dietary advice based on users' activity levels and health status. Enhance the recommendation engine using machine learning and artificial intelligence techniques to analyze user behavior, preferences, and feedback more accurately. This can lead to more precise recommendations and improved user satisfaction over time. Introduce social features that allow users to share their favorite organic food items, recipes, and meal plans with friends and family. Incorporate user-generated content, such as ratings, reviews, and comments, to enrich the recommendation system and foster a sense of community among users.







6.BIBLOGRAPHY
[1] Raciel yera toledo, Ahmad a. Alzahrani, and Luis Martínez , “A Food Recommender System Considering Nutritional Information and User Preferences”, IEEE ACCESS, August 2019 
[2] H. Jiang, E.-C. Chen, Y.-W. Lo, “The application of topic algorithm to diabetic diet recommendation”, January 2015 
[3] ung-Hyun Lee, Jong-Hum Kim, Jee-Song Park, “Design of Diet Recommendation System for Healthcare Service Based on User Information”, January 2009 
[4] Rung-Ching Chen, Yu-Hsien Ting, “Dietary recommendation based on recipe ontology”, Conference Paper · October 2014
[5] Vijay Jaiswal , “A new approach for recommending healthy diet using predictive data mining algorithm”, IJRAR March 2019 
[6] FidelsonTanzil, Lili A Wulandhari, Sani W. Isa, “Artificial Bee Colony — Based for dietary recommendation in daily nutrition requirements”, Conference Paper · November 2016 
[7] Mohd Afisi, Mohd Shukran, Yuk Ying Chung, “Artificial Bee Colony based Data Mining Algorithms for Classification Tasks”, August 2011 
[8] Chang-Shing Lee, Mei-Hui Wang, Hani Hagras, “A T ype-2 Fuzzy Ontology and Its Applications to Personal Diabetic Diet Recommendation”, IEEE Transctions On Fuzzy Systems,Vol. 18,NO. 2, APRIL 2010 
[9] Xiaoyan Gao, Fuli Feng, Xiangnan He, Heyan Huang, Xinyu Guan, Chong Feng, Zhaoyan Ming, and Tat-Seng Chua, “Hierarchical Attention Network for Visually-aware Food Recommendation”, arXiv:1810.05032v3 [cs.IR] 6 Jan 2019 
[10] Madhu Raut, Keyur Prabhu, Rachita Fatehpuria, Shubham Bangar, Prof. Sunita Sahu, “A Personalized Diet Recommendation System using Fuzzy Ontology”, International Journal of Engineering Science Invention (IJESI), March 2018 
[11] Raza Yunus, Omar Arif, Hammad Afzal, Muhammad Faisal Amjad, Haider Abbas, “A Framework to Estimate the Nutritional Value of Food in Real Time Using Deep Learning Techniques”, IEEE Access, January 2019 
[12] Raza Yunus, Omar Arif, Hammad Afzal, Muhammad Faisal Amjad, Haider Abbas, Hira Noor Bokhari, Syeda Tazeen Haider, “A Framework to Estimate the Nutritional Value of Food in Real Time Using Deep Learning Techniques”, IEEE Access, January 
 APPENDICES

A.DATA FLOW DIAGRAM:


DFD 0:












	

























B.TABLE STRUCTURE





SNO
FIELDNAME
DATATYPE
NULL
DEFAULT
1
User


Varchar
Yes
NULL
2
Registration


Varchar
Yes
NULL
3
Login
Varchar
Yes
NULL
4
Organic food


Varchar
Yes
NULL





















      C.SAMPLE CODING
INDEX:
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Foody - Organic Food Website Template</title>
<meta content="width=device-width, initial-scale=1.0" name="viewport">
<meta content="" name="keywords">
<meta content="" name="description">
<!-- Favicon -->
<link href="img/favicon.ico" rel="icon">
<!-- Google Web Fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500&family=Lora:wght@600;700&display=swap" rel="stylesheet">
<!-- Icon Font Stylesheet -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
<!-- Libraries Stylesheet -->
<link href="lib/animate/animate.min.css" rel="stylesheet">
<link href="lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
<!-- Customized Bootstrap Stylesheet -->
<link href="css/bootstrap.min.css" rel="stylesheet">
<!-- Template Stylesheet -->
<link href="css/style.css" rel="stylesheet">
</head>
<body>
<!-- Spinner Start -->
<div id="spinner" class="show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
<div class="spinner-border text-primary" role="status"></div>
</div>
<!-- Spinner End -->
<!-- Navbar Start -->
<div class="container-fluid fixed-top px-0 wow fadeIn" data-wow-delay="0.1s">
<!--<div class="top-bar row gx-0 align-items-center d-none d-lg-flex">
<div class="col-lg-6 px-5 text-start">
<small><i class="fa fa-map-marker-alt me-2"></i>123 Street, New York, USA</small>
<small class="ms-4"><i class="fa fa-envelope me-2"></i>info@example.com</small>
</div>
<div class="col-lg-6 px-5 text-end">
<small>Follow us:</small>
<a class="text-body ms-3" href=""><i class="fab fa-facebook-f"></i></a>
<a class="text-body ms-3" href=""><i class="fab fa-twitter"></i></a>
<a class="text-body ms-3" href=""><i class="fab fa-linkedin-in"></i></a>
<a class="text-body ms-3" href=""><i class="fab fa-instagram"></i></a>
</div>
</div>-->
<nav class="navbar navbar-expand-lg navbar-light py-lg-0 px-lg-5 wow fadeIn" data-wow-delay="0.1s">
<a href="index.html" class="navbar-brand ms-4 ms-lg-0">
<h1 class="fw-bold text-primary m-0">F<span class="text-secondary">oo</span>dy</h1>
</a>
<button type="button" class="navbar-toggler me-4" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
<span class="navbar-toggler-icon"></span>
</button>
<div class="collapse navbar-collapse" id="navbarCollapse">
<div class="navbar-nav ms-auto p-4 p-lg-0">
<a href="index.html" class="nav-item nav-link active">Home</a>
           <div class="nav-item dropdown">
<a href="#" class="nav-link dropdown-toggle" data-bs-toggle="dropdown">User'S</a>
<div class="dropdown-menu m-0">
<a href="Registration.html" class="dropdown-item">User Registration</a>
<a href="Login.html" class="dropdown-item">User Login</a>
</div>
</div>				
<a href="about.html" class="nav-item nav-link">About Us</a>
<a href="product.html" class="nav-item nav-link">Products</a>
<div class="nav-item dropdown">
<a href="#" class="nav-link dropdown-toggle" data-bs-toggle="dropdown">Pages</a>
<div class="dropdown-menu m-0">
<!--<a href="blog.html" class="dropdown-item">Blog Grid</a> -->
<a href="feature.html" class="dropdown-item">Our Features</a>
<!--<a href="testimonial.html" class="dropdown-item">Testimonial</a>
<a href="404.html" class="dropdown-item">404 Page</a> -->
</div>
</div>
<a href="contact.html" class="nav-item nav-link">Contact Us</a>
</div>
<div class="d-none d-lg-flex ms-2">
<a class="btn-sm-square bg-white rounded-circle ms-3" href="">
<small class="fa fa-search text-body"></small>
</a>
<a class="btn-sm-square bg-white rounded-circle ms-3" href="">
<small class="fa fa-user text-body"></small>
</a>
<a class="btn-sm-square bg-white rounded-circle ms-3" href="">
<small class="fa fa-shopping-bag text-body"></small>
</a>
</div>
</div>
</nav>
</div>
<!-- Navbar End -->
<!-- Carousel Start -->
<div class="container-fluid p-0 mb-5 wow fadeIn" data-wow-delay="0.1s">
<div id="header-carousel" class="carousel slide" data-bs-ride="carousel">
<div class="carousel-inner">
<div class="carousel-item active">
<img class="w-100" src="img/carousel-1.jpg" alt="Image">
<div class="carousel-caption">
<div class="container">
<div class="row justify-content-start">
<div class="col-lg-7">
<h1 class="display-2 mb-5 animated slideInDown">Organic Food Is Good For Health</h1>
<a href="" class="btnbtn-primary rounded-pill py-sm-3 px-sm-5">Organic Products</a>
<a href="" class="btnbtn-secondary rounded-pill py-sm-3 px-sm-5 ms-3">Services</a>
</div>
</div>
</div>
</div>
</div>
<div class="carousel-item">
<img class="w-100" src="img/carousel-2.jpg" alt="Image">
<div class="carousel-caption">
<div class="container">
<div class="row justify-content-start">
<div class="col-lg-7">
<h1 class="display-2 mb-5 animated slideInDown">Natural Food Is Always Healthy</h1>
<a href="" class="btnbtn-primary rounded-pill py-sm-3 px-sm-5">Products</a>
<a href="" class="btnbtn-secondary rounded-pill py-sm-3 px-sm-5 ms-3">Services</a>
</div>
</div>
</div>
</div>
</div>
</div>
<button class="carousel-control-prev" type="button" data-bs-target="#header-carousel"
                data-bs-slide="prev">
<span class="carousel-control-prev-icon" aria-hidden="true"></span>
<span class="visually-hidden">Previous</span>
</button>
<button class="carousel-control-next" type="button" data-bs-target="#header-carousel"
                data-bs-slide="next">
<span class="carousel-control-next-icon" aria-hidden="true"></span>
<span class="visually-hidden">Next</span>
</button>
</div>
</div>
<!-- Carousel End -->
<!-- About Start -->
<!--<div class="container-xxl py-5">
<div class="container">
<div class="row g-5 align-items-center">
<div class="col-lg-6 wow fadeIn" data-wow-delay="0.1s">
<div class="about-img position-relative overflow-hidden p-5 pe-0">
<img class="img-fluid w-100" src="img/about.jpg">
</div>
</div>
<div class="col-lg-6 wow fadeIn" data-wow-delay="0.5s">
<h1 class="display-5 mb-4">Best Organic Fruits And Vegetables</h1>
<p class="mb-4">Organic food is the product of a farming system which avoids the use of man-made fertilisers, pesticides; growth regulators and livestock feed additives.</p>
<p><i class="fa fa-check text-primary me-3"></i>Strawberries,
Spinach,
Kale, Collards and Mustard Greens.</p>
<p><i class="fa fa-check text-primary me-3"></i>Nectarines,
Apples,
Grapes</p>
<p><i class="fa fa-check text-primary me-3"></i>Bell Peppers and Hot Peppers,
Cherries</p>
<!--<a class="btnbtn-primary rounded-pill py-3 px-5 mt-3" href="">Read More</a> -->
</div>
</div>
</div>
</div>-->
<!-- About End -->
<!-- Feature Start -->
<!--<div class="container-fluid bg-light bg-icon my-5 py-6">
<div class="container">
<div class="section-header text-center mx-auto mb-5 wow fadeInUp" data-wow-delay="0.1s" style="max-width: 500px;">
<h1 class="display-5 mb-3">Our Features</h1>
<p>Temporut dolore lorem kasdvero ipsum sit eirmod sit. Ipsum diamjustosedrebumverodolorduo.</p>
</div>
<div class="row g-4">
<div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
<div class="bg-white text-center h-100 p-4 p-xl-5">
<img class="img-fluid mb-4" src="img/icon-1.png" alt="">
<h4 class="mb-3">Natural Process</h4>
<p class="mb-4">Temporut dolore lorem kasdvero ipsum sit eirmod sit. Ipsum diamjustosedverodolorduo.</p>
<a class="btnbtn-outline-primary border-2 py-2 px-4 rounded-pill" href="">Read More</a>
</div>
</div>
<div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.3s">
<div class="bg-white text-center h-100 p-4 p-xl-5">
<img class="img-fluid mb-4" src="img/icon-2.png" alt="">
<h4 class="mb-3">Organic Products</h4>
<p class="mb-4">Temporut dolore lorem kasdvero ipsum sit eirmod sit. Ipsum diamjustosedverodolorduo.</p>
<a class="btnbtn-outline-primary border-2 py-2 px-4 rounded-pill" href="">Read More</a>
</div>
</div>
<div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.5s">
<div class="bg-white text-center h-100 p-4 p-xl-5">
<img class="img-fluid mb-4" src="img/icon-3.png" alt="">
<h4 class="mb-3">Biologically Safe</h4>
<p class="mb-4">Temporut dolore lorem kasdvero ipsum sit eirmod sit. Ipsum diamjustosedverodolorduo.</p>
<a class="btnbtn-outline-primary border-2 py-2 px-4 rounded-pill" href="">Read More</a>
</div>
</div>
</div>
</div>
</div> -->
<!-- Feature End -->
<!-- Product Start -->
<!--<div class="container-xxl py-5">
<div class="container">
<div class="row g-0 gx-5 align-items-end">
<div class="col-lg-6">
<div class="section-header text-start mb-5 wow fadeInUp" data-wow-delay="0.1s" style="max-width: 500px;">
<h1 class="display-5 mb-3">Our Products</h1>
<p>Temporut dolore lorem kasdvero ipsum sit eirmod sit. Ipsum diamjustosedrebumverodolorduo.</p>
</div>
</div>
<div class="col-lg-6 text-start text-lg-end wow slideInRight" data-wow-delay="0.1s">
<ul class="nav nav-pills d-inline-flex justify-content-end mb-5">
<li class="nav-item me-2">
<a class="btnbtn-outline-primary border-2 active" data-bs-toggle="pill" href="#tab-1">Vegetable</a>
</li>
<li class="nav-item me-2">
<a class="btnbtn-outline-primary border-2" data-bs-toggle="pill" href="#tab-2">Fruits </a>
</li>
<li class="nav-item me-0">
<a class="btnbtn-outline-primary border-2" data-bs-toggle="pill" href="#tab-3">Fresh</a>
</li>
</ul>
</div>
</div>
<div class="tab-content">
<div id="tab-1" class="tab-pane fade show p-0 active">
<div class="row g-4">
<div class="col-xl-3 col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-1.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.3s">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-2.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.5s">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-3.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.7s">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-4.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-5.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.3s">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-6.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.5s">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-7.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.7s">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-8.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-12 text-center wow fadeInUp" data-wow-delay="0.1s">
<a class="btnbtn-primary rounded-pill py-3 px-5" href="">Browse More Products</a>
</div>
</div>
</div>
<div id="tab-2" class="tab-pane fade show p-0">
<div class="row g-4">
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-1.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-2.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-3.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-4.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-5.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-6.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-7.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-8.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-12 text-center">
<a class="btnbtn-primary rounded-pill py-3 px-5" href="">Browse More Products</a>
</div>
</div>
</div>
<div id="tab-3" class="tab-pane fade show p-0">
<div class="row g-4">
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-1.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-2.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-3.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-4.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-5.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-6.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-7.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-xl-3 col-lg-4 col-md-6">
<div class="product-item">
<div class="position-relative bg-light overflow-hidden">
<img class="img-fluid w-100" src="img/product-8.jpg" alt="">
<div class="bg-secondary rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">New</div>
</div>
<div class="text-center p-4">
<a class="d-block h5 mb-2" href="">Fresh Tomato</a>
<span class="text-primary me-1">$19.00</span>
<span class="text-body text-decoration-line-through">$29.00</span>
</div>
<div class="d-flex border-top">
<small class="w-50 text-center border-end py-2">
<a class="text-body" href=""><i class="fa fa-eye text-primary me-2"></i>View detail</a>
</small>
<small class="w-50 text-center py-2">
<a class="text-body" href=""><i class="fa fa-shopping-bag text-primary me-2"></i>Add to cart</a>
</small>
</div>
</div>
</div>
<div class="col-12 text-center">
<a class="btnbtn-primary rounded-pill py-3 px-5" href="">Browse More Products</a>
</div>
</div>
</div>
</div>
</div>
</div> -->
<!-- Product End -->
<!-- Firm Visit Start -->
<!--<div class="container-fluid bg-primary bg-icon mt-5 py-6">
<div class="container">
<div class="row g-5 align-items-center">
<div class="col-md-7 wow fadeIn" data-wow-delay="0.1s">
<h1 class="display-5 text-white mb-3">Visit Our Firm</h1>
<p class="text-white mb-0">Temporeratelitrrebum at clita. Diamdolordiam ipsum sit. Aliqudiamametdiam et eos. Clitaerat ipsum et lorem et sit, sed stet lorem sit clita duo justo magna dolore eratamet. Diamdolordiam ipsum sit. Aliqudiamametdiam et eos.</p>
</div>
<div class="col-md-5 text-md-end wow fadeIn" data-wow-delay="0.5s">
<a class="btnbtn-lgbtn-secondary rounded-pill py-3 px-5" href="">Visit Now</a>
</div>
</div>
</div>
</div> -->
<!-- Firm Visit End -->
<!-- Testimonial Start -->
<!--<div class="container-fluid bg-light bg-icon py-6 mb-5">
<div class="container">
<div class="section-header text-center mx-auto mb-5 wow fadeInUp" data-wow-delay="0.1s" style="max-width: 500px;">
<h1 class="display-5 mb-3">Customer Review</h1>
<p>Temporut dolore lorem kasdvero ipsum sit eirmod sit. Ipsum diamjustosedrebumverodolorduo.</p>
</div>
<div class="owl-carousel testimonial-carousel wow fadeInUp" data-wow-delay="0.1s">
<div class="testimonial-item position-relative bg-white p-5 mt-4">
<i class="fa fa-quote-left fa-3x text-primary position-absolute top-0 start-0 mt-n4 ms-5"></i>
<p class="mb-4">Temporeratelitrrebum at clita. Diamdolordiam ipsum sit diamametdiam et eos. Clitaerat ipsum et lorem et sit.</p>
<div class="d-flex align-items-center">
<img class="flex-shrink-0 rounded-circle" src="img/testimonial-1.jpg" alt="">
<div class="ms-3">
<h5 class="mb-1">Client Name</h5>
<span>Profession</span>
</div>
</div>
</div>
<div class="testimonial-item position-relative bg-white p-5 mt-4">
<i class="fa fa-quote-left fa-3x text-primary position-absolute top-0 start-0 mt-n4 ms-5"></i>
<p class="mb-4">Temporeratelitrrebum at clita. Diamdolordiam ipsum sit diamametdiam et eos. Clitaerat ipsum et lorem et sit.</p>
<div class="d-flex align-items-center">
<img class="flex-shrink-0 rounded-circle" src="img/testimonial-2.jpg" alt="">
<div class="ms-3">
<h5 class="mb-1">Client Name</h5>
<span>Profession</span>
</div>
</div>
</div>
<div class="testimonial-item position-relative bg-white p-5 mt-4">
<i class="fa fa-quote-left fa-3x text-primary position-absolute top-0 start-0 mt-n4 ms-5"></i>
<p class="mb-4">Temporeratelitrrebum at clita. Diamdolordiam ipsum sit diamametdiam et eos. Clitaerat ipsum et lorem et sit.</p>
<div class="d-flex align-items-center">
<img class="flex-shrink-0 rounded-circle" src="img/testimonial-3.jpg" alt="">
<div class="ms-3">
<h5 class="mb-1">Client Name</h5>
<span>Profession</span>
</div>
</div>
</div>
<div class="testimonial-item position-relative bg-white p-5 mt-4">
<i class="fa fa-quote-left fa-3x text-primary position-absolute top-0 start-0 mt-n4 ms-5"></i>
<p class="mb-4">Temporeratelitrrebum at clita. Diamdolordiam ipsum sit diamametdiam et eos. Clitaerat ipsum et lorem et sit.</p>
<div class="d-flex align-items-center">
<img class="flex-shrink-0 rounded-circle" src="img/testimonial-4.jpg" alt="">
<div class="ms-3">
<h5 class="mb-1">Client Name</h5>
<span>Profession</span>
</div>
</div>
</div>
</div>
</div>
</div>-->
<!-- Testimonial End -->
<!-- Blog Start -->
<!--<div class="container-xxl py-5">
<div class="container">
<div class="section-header text-center mx-auto mb-5 wow fadeInUp" data-wow-delay="0.1s" style="max-width: 500px;">
<h1 class="display-5 mb-3">Latest Blog</h1>
<p>Temporut dolore lorem kasdvero ipsum sit eirmod sit. Ipsum diamjustosedrebumverodolorduo.</p>
</div>
<div class="row g-4">
<div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
<img class="img-fluid" src="img/blog-1.jpg" alt="">
<div class="bg-light p-4">
<a class="d-block h5 lh-base mb-4" href="">How to cultivate organic fruits and vegetables in own firm</a>
<div class="text-muted border-top pt-4">
<small class="me-3"><i class="fa fa-user text-primary me-2"></i>Admin</small>
<small class="me-3"><i class="fa fa-calendar text-primary me-2"></i>01 Jan, 2045</small>
</div>
</div>
</div>
<div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.3s">
<img class="img-fluid" src="img/blog-2.jpg" alt="">
<div class="bg-light p-4">
<a class="d-block h5 lh-base mb-4" href="">How to cultivate organic fruits and vegetables in own firm</a>
<div class="text-muted border-top pt-4">
<small class="me-3"><i class="fa fa-user text-primary me-2"></i>Admin</small>
<small class="me-3"><i class="fa fa-calendar text-primary me-2"></i>01 Jan, 2045</small>
</div>
</div>
</div>
<div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.5s">
<img class="img-fluid" src="img/blog-3.jpg" alt="">
<div class="bg-light p-4">
<a class="d-block h5 lh-base mb-4" href="">How to cultivate organic fruits and vegetables in own firm</a>
<div class="text-muted border-top pt-4">
<small class="me-3"><i class="fa fa-user text-primary me-2"></i>Admin</small>
<small class="me-3"><i class="fa fa-calendar text-primary me-2"></i>01 Jan, 2045</small>
</div>
</div>
</div>
</div>
</div>
</div> -->
<!-- Blog End -->
<!-- Footer Start -->
<!--<div class="container-fluid bg-dark footer mt-5 pt-5 wow fadeIn" data-wow-delay="0.1s">
<div class="container py-5">
<div class="row g-5">
<div class="col-lg-3 col-md-6">
<h1 class="fw-bold text-primary mb-4">F<span class="text-secondary">oo</span>dy</h1>
<p>Diamdolordiam ipsum sit. Aliqudiamametdiam et eos. Clitaerat ipsum et lorem et sit, sed stet lorem sit clita</p>
<div class="d-flex pt-2">
<a class="btnbtn-square btn-outline-light rounded-circle me-1" href=""><i class="fab fa-twitter"></i></a>
<a class="btnbtn-square btn-outline-light rounded-circle me-1" href=""><i class="fab fa-facebook-f"></i></a>
<a class="btnbtn-square btn-outline-light rounded-circle me-1" href=""><i class="fab fa-youtube"></i></a>
<a class="btnbtn-square btn-outline-light rounded-circle me-0" href=""><i class="fab fa-linkedin-in"></i></a>
</div>
</div>
<div class="col-lg-3 col-md-6">
<h4 class="text-light mb-4">Address</h4>
<p><i class="fa fa-map-marker-alt me-3"></i>123 Street, New York, USA</p>
<p><i class="fa fa-phone-alt me-3"></i>+012 345 67890</p>
<p><i class="fa fa-envelope me-3"></i>info@example.com</p>
</div>
<div class="col-lg-3 col-md-6">
<h4 class="text-light mb-4">Quick Links</h4>
<a class="btnbtn-link" href="">About Us</a>
<a class="btnbtn-link" href="">Contact Us</a>
<a class="btnbtn-link" href="">Our Services</a>
<a class="btnbtn-link" href="">Terms & Condition</a>
<a class="btnbtn-link" href="">Support</a>
</div>
<div class="col-lg-3 col-md-6">
<h4 class="text-light mb-4">Newsletter</h4>
<p>Doloramet sit justoametelitrclita ipsum elitr est.</p>
<div class="position-relative mx-auto" style="max-width: 400px;">
<input class="form-control bg-transparent w-100 py-3 ps-4 pe-5" type="text" placeholder="Your email">
<button type="button" class="btnbtn-primary py-2 position-absolute top-0 end-0 mt-2 me-2">SignUp</button>
</div>
</div>
</div>
</div>
<div class="container-fluid copyright">
<div class="container">
<div class="row">
<div class="col-md-6 text-center text-md-start mb-3 mb-md-0">
&copy; <a href="#">Your Site Name</a>, All Right Reserved.
</div>
<div class="col-md-6 text-center text-md-end">
<!--/*** This template is free as long as you keep the footer author’s credit link/attribution link/backlink. If you'd like to use the template without the footer author’s credit link/attribution link/backlink, you can purchase the Credit Removal License from "https://htmlcodex.com/credit-removal". Thank you for your support. ***/
                        Designed By <a href="https://htmlcodex.com">HTML Codex</a>
</div>
</div>
</div>
</div>
</div>-->
<!-- Footer End -->
<!-- Back to Top -->
<a href="#" class="btnbtn-lgbtn-primary btn-lg-square rounded-circle back-to-top"><i class="bi bi-arrow-up"></i></a>
<!-- JavaScript Libraries -->
<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="lib/wow/wow.min.js"></script>
<script src="lib/easing/easing.min.js"></script>
<script src="lib/waypoints/waypoints.min.js"></script>
<script src="lib/owlcarousel/owl.carousel.min.js"></script>
<!-- Template Javascript -->
<script src="js/main.js"></script>
</body>
</html>

LOGIN:
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta name="description" content="">
<meta name="author" content="">
<link href="assets_Login/css/bootstrap.min.css" rel="stylesheet">
<link href="assets_Login/css/font-awesome.min.css" rel="stylesheet">
<link href="assets_Login/css/style.css" rel="stylesheet">
<title>User Login</title>
</head>
<body>
<section class="form-02-main">
<div class="container">
<div class="row">
<div class="col-md-12">
<div class="_lk_de">
<div class="form-03-main">
<div class="logo">
<imgsrc="assets_Login/images/user.png">
</div>
<h2> Login </h2>
<form name="form1" method="post" action="Login1">
<div class="form-group">
<input type="text" name="username" class="form-control _ge_de_ol" type="text" placeholder="Enter User Name" required="" aria-required="true">
</div>
<div class="form-group">
<input type="password" name="password" class="form-control _ge_de_ol" type="text" placeholder="Enter Password" required="" aria-required="true">
</div>
<div class="checkbox form-group">
<a href="Registration.html">New User</a><a href="indexs.html">Home</a>
</div>
<div class="form-group">
<input type="submit" name="submit" class="_btn_04" value="submit">
</div>
</form>

<div class="form-group pt-0">
<div class="_social_04">
<ol>
</ol>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
</body>
</html>

Registration:
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<meta name="description" content="">
<meta name="author" content="">
<link href="assets_Login/css/bootstrap.min.css" rel="stylesheet">
<link href="assets_Login/css/font-awesome.min.css" rel="stylesheet">
<link href="assets_Login/css/style.css" rel="stylesheet">
<title>Reg</title>
	<!-- Favicon -->
<link href="img/favicon.ico" rel="icon">
<!-- Google Web Fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500&family=Lora:wght@600;700&display=swap" rel="stylesheet">
<!-- Icon Font Stylesheet -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
<!-- Libraries Stylesheet -->
<link href="lib/animate/animate.min.css" rel="stylesheet">
<link href="lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
<!-- Customized Bootstrap Stylesheet -->
<link href="css/bootstrap.min.css" rel="stylesheet">
<!-- Template Stylesheet -->
<link href="css/style.css" rel="stylesheet">
</head>
<body>


<section class="form-02-main">
<div class="container">
<div class="row">
<div class="col-md-12">
<div class="_lk_de">
<div class="form-03-main">
<div class="logo">
<imgsrc="assets_Login/images/user.png">
</div>
<h2> Registration</h2>
<form name="form1" method="post" action="User_Registration1">
<div class="form-group">
<input type="text" name="username" class="form-control _ge_de_ol" type="text" placeholder="Enter User Name" required="" aria-required="true">
</div>
<div class="form-group">
<input type="password" name="password" class="form-control _ge_de_ol" type="text" placeholder="Enter Password" required="" aria-required="true">
</div>
<div class="form-group">
<input type="password" name="password_con" class="form-control _ge_de_ol" type="text" placeholder="Enter Conform Password" required="" aria-required="true">
</div>
<div class="checkbox form-group">
<a href="index.html">Home Page</a><a href="Login.html">Already Registered login Here </a>
</div>
<div class="form-group">
<input type="submit" name="submit" class="_btn_04" value="submit">
</div>
</form>
<div class="form-group pt-0">
<div class="_social_04">
<ol>
</ol>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
</body>
</html>
D.SAMPLE INPUT:













E.SAMPLE OUTPUT:

  





                                                                                 

